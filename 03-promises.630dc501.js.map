{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,SAAU,GAENC,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,UAEtB,SAASC,EAAaC,GAEpB,GADAA,EAAMC,kBACDR,EAAKS,MAAO,CACE,IAAIC,SAASH,EAAMI,eAC3BC,SAAQ,SAACC,EAAKC,GACrBd,EAAKc,GAAQC,OAAOF,E,IAEtBX,EAAKc,O,CAEP,GAAIhB,EAAKC,UAAYD,EAAKiB,OAGxB,OAFAjB,EAAKS,WAAQS,OACblB,EAAKC,SAAW,GAGlB,IAAIkB,EAAInB,EAAKC,SACTmB,EAAIpB,EAAKS,MAOKR,EANPkB,EAMiBV,EANdW,EAOHC,YAAW,YAWxB,SAAuBpB,EAAUQ,GAC/B,OAAO,IAAIa,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,IAEpCH,EAAQ,CAAEtB,WAAUQ,UAEtBe,EAAO,CAAEvB,WAAUQ,S,KAhBnBkB,CAAc1B,EAAUQ,GACrBmB,MAAK,SAAAC,G,IAAGC,EAAQD,EAAR5B,SAAU8B,EAAKF,EAALpB,MACjBX,EAAAkC,OAAOC,KAAK,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,IAE3DI,OAAM,SAAAN,G,IAAGC,EAAQD,EAAR5B,SAAU8B,EAAKF,EAALpB,MAClBX,EAAAkC,OAAOI,QAAQ,sBAAqCF,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,MAE7DtB,GAdHT,EAAKC,UAAY,EACjBD,EAAKS,OAAST,EAAKqC,KACnB/B,EAAaC,GAGf,IAAoBN,EAAUQ,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from \"notiflix/build/notiflix-notify-aio\";\n\nconst refs = {\n  position: 0,\n};\nconst form = document.querySelector(\".form\");\n\nform.addEventListener(\"submit\", onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  if (!refs.delay) {\n    const formData = new FormData(event.currentTarget);\n    formData.forEach((val, name) => {\n      refs[name] = Number(val);\n    });\n    form.reset();\n  }\n  if (refs.position >= refs.amount) {\n    refs.delay = undefined;\n    refs.position = 0;\n    return;\n  }\n  let p = refs.position;\n  let d = refs.delay;\n  setPromise(p, d);\n  refs.position += 1;\n  refs.delay += refs.step;\n  onFormSubmit(event);\n}\n\nfunction setPromise(position, delay) {\n  const id = setTimeout(() => {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.info(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }, delay);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve({ position, delay });\n    }\n    reject({ position, delay });\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","position","$ce04d3a99e08e73b$var$form","document","querySelector","addEventListener","$ce04d3a99e08e73b$var$onFormSubmit","event","preventDefault","delay","FormData","currentTarget","forEach","val","name","Number","reset","amount","undefined","p","d","setTimeout","Promise","resolve","reject","Math","random","$ce04d3a99e08e73b$var$createPromise","then","param","_$position","_$delay","Notify","info","concat","catch","failure","step"],"version":3,"file":"03-promises.630dc501.js.map"}